# Cursor Rules: Phemex Trading Bot - STRICT ENFORCEMENT

This MDC applies globally to this workspace and STRICTLY ENFORCES Phemex API usage, file structure, and trading safety.

## 🚨 CRITICAL SAFETY RULES (NEVER VIOLATE)
- **LIVE_TRADE**: NEVER set to "true" without explicit user permission
- **API Keys**: NEVER log, display, or commit API keys to version control
- **Risk Limits**: NEVER exceed MAX_DAILY_LOSS_PCT or MAX_CAPITAL_FRACTION
- **Leverage**: NEVER change user-specified leverage automatically
- **Position Limits**: NEVER exceed MAX_POSITIONS limit

## 🔐 API USAGE ENFORCEMENT
- **Exchange**: Phemex USDT-margined swaps ONLY (no spot, no coin-margined)
- **Authentication**: Always use proper HMAC-SHA256 signature with expiry
- **Rate Limiting**: Respect Phemex rate limits (100ms between requests minimum)
- **Error Handling**: Implement proper retry logic for transient errors
- **Client Cleanup**: Always close HTTP/WebSocket clients on shutdown

## 📁 STRICT FILE STRUCTURE ENFORCEMENT

### Core Bot Structure (NEVER MODIFY WITHOUT PERMISSION)
```
bot/
├── __init__.py                 # Bot package initialization
├── config.py                   # Settings and environment loading
├── api/
│   ├── __init__.py
│   └── server.py              # FastAPI webhook server
├── engine/
│   ├── __init__.py
│   ├── scanner.py             # Market scanner engine
│   ├── discovery.py           # Symbol discovery
│   └── symbols.py             # Symbol management
├── exchange/
│   ├── __init__.py
│   ├── phemex_client.py       # Phemex API client (PRIMARY)
│   └── ccxt_client.py         # CCXT fallback client
├── execution/
│   ├── __init__.py
│   ├── brackets.py            # Bracket order management
│   └── execute.py             # Order execution
├── risk/
│   ├── __init__.py
│   ├── guards.py              # Risk management guards
│   └── sizing.py              # Position sizing calculations
├── signals/
│   ├── __init__.py
│   └── webhook_models.py      # TradingView webhook models
├── strategy/
│   ├── __init__.py
│   ├── pr.py                  # Predictive ranges
│   └── score.py               # Signal scoring
├── ui/
│   ├── __init__.py
│   ├── tui_display.py         # Terminal UI
│   └── static/                # Web UI assets
├── utils/
│   ├── __init__.py
│   └── symbol_conversion.py   # Symbol format conversion
└── validation/
    ├── __init__.py
    └── math_validator.py      # Mathematical validation
```

### Root Files (NEVER DELETE OR MODIFY WITHOUT PERMISSION)
- `main.py`                    # Main entry point
- `unified_trading_bot.py`     # Unified bot implementation
- `setup_live_trading.py`      # Live trading setup
- `env.template`               # Environment template
- `requirements.txt`            # Python dependencies
- `README.md`                  # Project documentation

## 🎯 TRADING EXECUTION RULES

### Order Management
- **Entry Orders**: Market orders for immediate execution
- **Take Profit**: Limit orders with `reduceOnly: true`
- **Stop Loss**: Stop-Market orders with `reduceOnly: true`
- **Position Side**: Always `posSide: Merged` (one-way mode)

### Risk Management
- **Position Sizing**: Use `risk.sizing.compute_quantity()`
- **Daily Loss Limit**: Enforce `MAX_DAILY_LOSS_PCT`
- **Capital Fraction**: Never exceed `MAX_CAPITAL_FRACTION`
- **Cooldown**: Respect `ENTRY_COOLDOWN_S` between trades

### Signal Processing
- **Webhook Validation**: Verify `WEBHOOK_TOKEN` before processing
- **Signal Scoring**: Use `strategy.score.compute_total_score()`
- **Score Filter**: Only trade signals ≥ `SCORE_MIN`
- **Validation**: Run mathematical validation before execution

## 🔧 DEVELOPMENT RULES

### Code Quality
- **Type Hints**: Use proper type annotations
- **Error Handling**: Comprehensive exception handling
- **Logging**: Structured logging with appropriate levels
- **Documentation**: Inline docstrings for all functions

### Testing
- **Dry Run**: Always test with `LIVE_TRADE=false` first
- **API Testing**: Test API connections before live trading
- **Validation**: Test all risk calculations and limits

### Environment Management
- **API Keys**: Load from environment variables only
- **Configuration**: Use `bot.config.settings` for all config
- **Secrets**: Never hardcode secrets in source code

## 🚫 FORBIDDEN ACTIONS
- Creating new files outside the defined structure
- Modifying core bot files without explicit permission
- Adding new indicators or calculation logic
- Changing user-specified leverage or risk parameters
- Setting LIVE_TRADE=true without user approval
- Logging or displaying API keys
- Exceeding risk limits or position caps

## 📋 REQUIRED IMPORTS AND DEPENDENCIES
```python
# Always required for bot operations
from bot.config import settings
from bot.exchange.phemex_client import get_client
from bot.risk.sizing import compute_quantity
from bot.execution.brackets import build_bracket_orders
from bot.strategy.score import compute_total_score
```

## 🔄 EXECUTION FLOW (NEVER MODIFY)
1. **Startup**: Load environment variables and validate API credentials
2. **Initialization**: Initialize Phemex client and validate permissions
3. **Mode Selection**: Scanner mode or Webhook mode
4. **Signal Processing**: Validate, score, and size signals
5. **Risk Check**: Verify all risk parameters and limits
6. **Execution**: Place orders with proper risk management
7. **Monitoring**: Track positions and enforce limits
8. **Cleanup**: Close connections and log results

## ⚠️ SAFETY CHECKLIST (ALWAYS VERIFY)
- [ ] LIVE_TRADE environment variable is set correctly
- [ ] API credentials are loaded from environment
- [ ] Risk limits are within acceptable ranges
- [ ] Position limits are not exceeded
- [ ] All orders have proper reduce-only flags
- [ ] Client connections are properly closed
- [ ] Error handling covers all failure scenarios

---
description: Strict enforcement rules for Phemex trading bot API usage and file structure
globs: ["**/*.py", "**/*.md", "**/*.json", "**/*.env*"]
alwaysApply: true
---

alwaysApply: true
---
